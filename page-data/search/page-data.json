{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"earthengine-layers This repository currently contains a proof-of-concept prototype of the . currently this layer is not expected to be…","rawMarkdownBody":"# earthengine-layers\n\n> This repository currently contains a proof-of-concept prototype of the `EarthEngineLayer`. currently this layer is not expected to be functional outside of demonstration purposes.\n\nThis repository [deck.gl](https://deck.gl) layers for Google Earth Engine.\n\nThe primary export is the `EarthEngineLayer` layer, which accepts [Google Earth Engine API](https://github.com/google/earthengine-api) objects (`ee.Object`) as its `data` prop, and renders the satellite data imagery via a customized deck.gl `TileLayer`.\n\n## License\n\nMIT License\n","slug":"docs","title":"earthengine-layers"},{"excerpt":"What's New v0.0.0 Initial commit","rawMarkdownBody":"# What's New\n\n## v0.0.0 \n\nInitial commit\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"Get Started Installing Using in Python The  can be used as a plugin layer to . For more information see pydeck integration. Using in…","rawMarkdownBody":"# Get Started\n\n## Installing\n\n```sh\n$ yarn add @google/earthengine\n$ yarn add @unfolded/earthengine-layers\n$ yarn add @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n## Using in Python\n\nThe `EarthEngineLayer` can be used as a plugin layer to [`pydeck`](https://pydeck.gl).\n\nFor more information see [pydeck integration](docs/developer-guide/pydeck-integration.md).\n\n## Using in JavaScript\n\nTo use the `EarthEngineLayer` in your JavaScript application to visualize earthengine API objects (such as `ee.Image` objects):\n\n```js\nimport {Deck} from '@deck.gl/core`;\nimport {EarthEngineLayer} from `@unfolded/earthengine-layers`;\nimport ee from `@google/earthengine-layers`;\n\nconst eeImage = ee.Image('CGIAR/SRTM90_V4');\n\nnew Deck({\n  ...,\n  layers: new EarthEngineLayer({data: eeImage, vizParams: {min: 0, max: 255}})\n});\n```\n\n## Cloning the Repo\n\n```sh\ngit clone git@github.com:UnfoldedInc/earthengine-layers.git\ncd earthengine-layers\n```\n\n## Running Examples\n\nYou will need a Google client id which has been approved for use with earthengine. You also need to make sure you log in with a Google user account which has been approved for use with earth engine.\n\n```sh\ncd examples/ee-demo\nEE_CLIENT_ID=<your-client-id-goes-here>.apps.googleusercontent.com yarn start\n```\n\n## Contributing\n\n### Building and Testing Code\n\n```sh\ngit clone git@github.com:UnfoldedInc/earthengine-layers.git\ncd earthengine-layers\nyarn bootstrap\n```\n\n```sh\nyarn lint\nyarn lint fix # Autoformats code\nyarn test\n```\n\n## Building the Website\n\nTo build the website locally (for instance if you are making contributions)\n\n```sh\ncd website\nyarn\nyarn start\n```\n\nTo build the website for production\n\n```sh\ncd website\nyarn\nyarn build\n```\n","slug":"docs/developer-guide/get-started","title":"Get Started"},{"excerpt":"pydeck Integration This page is WIP. More information will be added soon. The  can be imported into  as a custom layer module. Usage…","rawMarkdownBody":"# pydeck Integration\n\n> This page is WIP. More information will be added soon.\n\nThe `EarthEngineLayer` can be imported into [`pydeck`](https://pydeck.gl) as a custom layer module.\n\n## Usage\n\n### Authentication\n\nSupplying EE authentication token from Python to the `EarthEngineLayer` (TBA)\n\n### Serialization\n\nEarthEngine API objects need to be serialized before they are passed to the `EarthEngineLayer`.\n","slug":"docs/developer-guide/pydeck-integration","title":"pydeck Integration"},{"excerpt":"@unfolded.gl/earthengine-layers (Experimental) This module contains a deck.gl layer for Earth Engine API objects. unfolded.gl is a…","rawMarkdownBody":"# @unfolded.gl/earthengine-layers (Experimental)\n\nThis module contains a [deck.gl](https://deck.gl) layer for [Earth Engine API objects](https://github.com/google/earthengine-api).\n\n[unfolded.gl](https://unfolded.gl/docs) is a collection of unfolded for big data visualizations.\n\nFor documentation please visit the [website](https://unfolded.gl).\n","slug":"modules/earthengine-layers","title":"@unfolded.gl/earthengine-layers (Experimental)"},{"excerpt":"EarthEngineLayer The  is a composite layer that makes it possible to visualize very large datasets. Instead of fetching the entire dataset…","rawMarkdownBody":"# EarthEngineLayer\n\n<!-- INJECT:\"TileLayerDemo\" -->\n\n<p class=\"badges\">\n  <img src=\"https://img.shields.io/badge/@unfolded.gl/earthengine--layers-lightgrey.svg?style=flat-square\" alt=\"@unfolded.gl/earthengine-layers\" />\n  <img src=\"https://img.shields.io/badge/lighting-yes-blue.svg?style=flat-square\" alt=\"lighting\" />\n</p>\n\nThe `EarthEngineLayer` is a composite layer that makes it possible to visualize very large datasets. Instead of fetching the entire dataset, it only loads and renders what's visible in the current viewport.\n\nTo use this layer, the data must be sliced into \"tiles\". Each tile has a pre-defined bounding box and level of detail.\nUsers have the option to load each tile from a unique URL, defined by a template in the `data` property.\nThe layer can also supply a callback `getTileData` that does custom fetching when a tile is requested.\nThe loaded tile data is then rendered with the layer(s) returned by `renderSubLayers`.\n\nThis particular example uses the deck.gl React bindings but the `EarthEngineLayer` can of course also be used with the pure JavaSript and scripting APIs:\n```js\nimport DeckGL from '@deck.gl/react';\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\n\nexport const App = ({viewport}) => {\n\n  const layer = new EarthEngineLayer({\n    // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers\n    data: 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n\n    minZoom: 0,\n    maxZoom: 19,\n\n    renderSubLayers: props => {\n      const {\n        bbox: {west, south, east, north}\n      } = props.tile;\n\n      return new BitmapLayer(props, {\n        data: null,\n        image: props.data,\n        bounds: [west, south, east, north]\n      });\n    }\n  });\n  return <DeckGL {...viewport} layers={[layer]} />;\n};\n```\n\n\n## Installation\n\nTo install the dependencies from NPM:\n\n```bash\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers @unfolded.gl/earthengine-layers\n```\n\n```js\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\nnew EarthEngineLayer({});\n```\n\nTo use pre-bundled scripts:\n\n```html\n<script src=\"https://unpkg.com/deck.gl@^8.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@unfolded.gl/earthengine-layers@^8.0.0/dist.min.js\"></script>\n```\n\n```js\nnew deck.EarthEngineLayer({});\n```\n\n## Indexing System\n\nAt each integer zoom level (`z`), the XY plane in the view space is divided into square tiles of the same size, each uniquely identified by their `x` and `y` index. When `z` increases by 1, the view space is scaled by 2, meaning that one tile at `z` covers the same area as four tiles at `z+1`.\n\nWhen the `EarthEngineLayer` is used with a geospatial view such as the [MapView](/docs/api-reference/map-view.md), x, y, and z are determined from [the OSM tile index](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames).\n\nWhen the `EarthEngineLayer` is used used with a non-geospatial view such as the [OrthographicView](/docs/api-reference/orthographic-view.md) or the [OrbitView](/docs/api-reference/orbit-view.md), `x` and `y` increment from the world origin, and each tile's width and height match that defined by the `tileSize` prop. For example, the tile `x: 0, y: 0` occupies the square between `[0, 0]` and `[tileSize, tileSize]`.\n\n\n## Properties\n\nInherits all properties from [base `Layer`](/docs/api-reference/layer.md).\n\nIf using the default `renderSubLayers`, supports all [`GeoJSONLayer`](/docs/layers/geojson-layer.md) properties to style features.\n\n### Data Options\n\n##### `data` (String|Array, optional)\n\n- Default: `[]`\n\nEither a URL template or an array of URL templates from which the tile data should be loaded.\n\nIf the value is a string: a URL template. Substrings `{x}` `{y}` and `{z}`, if present, will be replaced with a tile's actual index when it is requested.\n\nIf the value is an array: multiple URL templates. Each endpoint must return the same content for the same tile index. This can be used to work around [domain sharding](https://developer.mozilla.org/en-US/docs/Glossary/Domain_sharding), allowing browsers to download more resources simultaneously. Requests made are balanced among the endpoints, based on the tile index.\n\n\n##### `getTileData` (Function, optional)\n\n- Default: `tile => load(tile.url)`\n\nIf supplied, `getTileData` is called to retrieve the data of each tile. It receives one argument `tile` which contains the following fields:\n\n- `x` (Number) - x index of the tile\n- `y` (Number) - y index of the tile\n- `z` (Number) - z index of the tile\n- `url` (String) - resolved url of the tile if the `data` prop is provided, otherwise `null`\n- `bbox` (Object) - bounding box of the tile. When used with a geospatial view, `bbox` is in the shape of `{west: <longitude>, north: <latitude>, east: <longitude>, south: <latitude>}`. When used used with a non-geospatial view, `bbox` is in the shape of `{left, top, right, bottom}`.\n\nIt should return either the tile data or a Promise that resolves to the tile data.\n\nThis prop is not required if `data` points to a supported format (JSON or image by default). Additional formats may be added by registering [loaders.gl](https://loaders.gl/modules/core/docs/api-reference/register-loaders) modules.\n\n\n##### `tileSize` (Number, optional)\n\nThe pixel dimension of the tiles, usually a power of 2.\n\nWhen using a geospatial view, this prop has no effect.\n\nWhen using a non-geospatial view, the tile size represents the width and height of each tile in world units at zoom level `0`.\n\n- Default: `512`\n\n\n##### `maxZoom` (Number|Null, optional)\n\nUse tiles from this level when over-zoomed.\n\n- Default: `null`\n\n\n##### `minZoom` (Number, optional)\n\nHide tiles when under-zoomed.\n\n- Default: 0\n\n\n##### `maxCacheSize` (Number, optional)\n\nThe maximum number of tiles that can be cached. The tile cache keeps loaded tiles in memory even if they are no longer visible. It reduces the need to re-download the same data over and over again when the user pan/zooms around the map, providing a smoother experience.\n\nIf not supplied, the `maxCacheSize` is calculated as `5` times the number of tiles in the current viewport.\n\n- Default: `null`\n\n\n##### `maxCacheByteSize` (Number, optional)\n\nThe maximum memory used for caching tiles. If this limit is supplied, `getTileData` must return an object that contains a `byteLength` field.\n\n- Default: `null`\n\n\n##### `refinementStrategy` (Enum, optional)\n\nHow the tile layer refines the visibility of tiles. One of the following:\n\n* `'best-available'`: If a tile in the current viewport is waiting for its data to load, use cached content from the closest zoom level to fill the empty space. This approach minimizes the visual flashing due to missing content.\n* `'no-overlap'`: Avoid showing overlapping tiles when backfilling with cached content. This is usually favorable when tiles do not have opaque backgrounds.\n* `'never'`: Do not display any tile that is not selected.\n\n- Default: `'best-available'`\n\n\n### Render Options\n\n##### `renderSubLayers` (Function, optional))\n\nRenders one or an array of Layer instances with all the `EarthEngineLayer` props and the following props:\n\n* `id`: An unique id for this sublayer\n* `data`: Resolved from `getTileData`\n* `tile`: An object containing tile index `x`, `y`, `z`, and `bbox` of the tile.\n\n- Default: `props => new GeoJsonLayer(props)`\n\n\n### Callbacks\n\n##### `onViewportLoad` (Function, optional)\n\n`onViewportLoad` is a function that is called when all tiles in the current viewport are loaded. The loaded content (as returned by `getTileData`) for each visible tile is passed as an array to this callback function.\n\n- Default: `data => null`\n\n\n##### `onTileLoad` (Function, optional)\n\n`onTileLoad` called when a tile successfully loads.\n\n- Default: `() => {}`\n\nReceives arguments:\n\n- `tile` (Object) - the tile that has been loaded.\n\n##### `onTileError` (Function, optional)\n\n`onTileError` called when a tile failed to load.\n\n- Default: `console.error`\n\nReceives arguments:\n\n- `error` (`Error`)\n\n\n## Source\n\n[modules/geo-layers/src/tile-layer](https://github.com/uber/deck.gl/tree/master/modules/geo-layers/src/tile-layer)\n","slug":"modules/earthengine-layers/docs/api-reference/earthengine-layer","title":"EarthEngineLayer"},{"excerpt":"Add any custom React components here.","rawMarkdownBody":"Add any custom React components here.","slug":"website/src/components","title":"d any custom React components here."}]}}}