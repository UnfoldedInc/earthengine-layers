{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"earthengine-layers This repository currently contains a proof-of-concept prototype of the . currently this layer is not expected to be…","rawMarkdownBody":"# earthengine-layers\n\n> This repository currently contains a proof-of-concept prototype of the `EarthEngineLayer`. currently this layer is not expected to be functional outside of demonstration purposes.\n\n[deck.gl](https://deck.gl) layers for Google Earth Engine.\n\nThe primary export is the `EarthEngineLayer` layer, which accepts [Google Earth Engine API](https://github.com/google/earthengine-api) objects (`ee.Image`, `ee.ImageCollection`, `ee.FeatureCollection`) as its `data` prop, and renders the satellite data imagery via a customized deck.gl `TileLayer`.\n\n## License\n\nMIT License\n","slug":"docs","title":"earthengine-layers"},{"excerpt":"Authentication Authenticating with Earth Engine services is likely to be the biggest complication for developers who are not already working…","rawMarkdownBody":"# Authentication\n\nAuthenticating with Earth Engine services is likely to be the biggest complication for developers who are not already working with the EE API.\n\nWhile the EE API documenation and forums are the official source of information on how to authenticate, this is a quick overview \n\n## Authenticating via Login (Oauth)\n\nNote that this requires:\n- registering a Google client id\n- requesting Earth Engine access for that client\n- adding the URLs from which the application will be served to the whitelisted origins for that client id.\n\n## Authenticating via a Token\n\nTBA\n","slug":"docs/developer-guide/authentication","title":"Authentication"},{"excerpt":"What's New v0.0.0 Initial version","rawMarkdownBody":"# What's New\n\n## v0.0.0 \n\nInitial version\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"pydeck Integration This page is WIP. More information will be added soon. The  can be imported into  as a custom layer module. Usage…","rawMarkdownBody":"# pydeck Integration\n\n> This page is WIP. More information will be added soon.\n\nThe `EarthEngineLayer` can be imported into [`pydeck`](https://pydeck.gl) as a custom layer module.\n\n## Usage\n\n### Authentication\n\nSupplying EE authentication token from Python to the `EarthEngineLayer` (TBA)\n\n### Serialization\n\nEarthEngine API objects need to be serialized before they are passed to the `EarthEngineLayer`.\n","slug":"docs/developer-guide/pydeck-integration","title":"pydeck Integration"},{"excerpt":"Get Started Installing Using in Python The  can be used as a plugin layer to . For more information see pydeck integration. Using in…","rawMarkdownBody":"# Get Started\n\n## Installing\n\n```sh\n$ yarn add @google/earthengine\n$ yarn add @unfolded/earthengine-layers\n$ yarn add @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n## Using in Python\n\nThe `EarthEngineLayer` can be used as a plugin layer to [`pydeck`](https://pydeck.gl).\n\nFor more information see [pydeck integration](/docs/developer-guide/pydeck-integration.md).\n\n## Using in JavaScript\n\nTo use the `EarthEngineLayer` in your JavaScript application to visualize earthengine API objects (such as `ee.Image` objects):\n\n```js\nimport {Deck} from '@deck.gl/core`;\nimport {EarthEngineLayer} from `@unfolded/earthengine-layers`;\nimport ee from `@google/earthengine-layers`;\n\nconst eeImage = ee.Image('CGIAR/SRTM90_V4');\n\nnew Deck({\n  ...,\n  layers: new EarthEngineLayer({data: eeImage, vizParams: {min: 0, max: 255}})\n});\n```\n\n## Cloning the Repo\n\n```sh\ngit clone git@github.com:UnfoldedInc/earthengine-layers.git\ncd earthengine-layers\n```\n\n## Running Examples\n\nYou will need a Google client id which has been approved for use with earthengine. You also need to make sure you log in with a Google user account which has been approved for use with earth engine.\n\n```sh\ncd examples/ee-demo\nEE_CLIENT_ID=<your-client-id-goes-here>.apps.googleusercontent.com yarn start\n```\n\n## Contributing\n\n### Building and Testing Code\n\n```sh\ngit clone git@github.com:UnfoldedInc/earthengine-layers.git\ncd earthengine-layers\nyarn bootstrap\n```\n\n```sh\nyarn lint\nyarn lint fix # Autoformats code\nyarn test\n```\n\n## Building the Website\n\nTo build the website locally (for instance if you are making contributions)\n\n```sh\ncd website\nyarn\nyarn start\n```\n\nTo build the website for production\n\n```sh\ncd website\nyarn\nyarn build\n```\n","slug":"docs/developer-guide/get-started","title":"Get Started"},{"excerpt":"EarthEngineLayer The  builds on the strength of Google Earth Engine,\nmaking it possible to visualize planetary-scale geospatial datasets in…","rawMarkdownBody":"# EarthEngineLayer\n\n<!-- INJECT:\"TileLayerDemo\" -->\n\n<p class=\"badges\">\n  <img src=\"https://img.shields.io/badge/@unfolded.gl/earthengine--layers-lightgrey.svg?style=flat-square\" alt=\"@unfolded.gl/earthengine-layers\" />\n  <img src=\"https://img.shields.io/badge/lighting-yes-blue.svg?style=flat-square\" alt=\"lighting\" />\n</p>\n\nThe `EarthEngineLayer` builds on the strength of [Google Earth Engine][gee],\nmaking it possible to visualize planetary-scale geospatial datasets in\n[deck.gl](https://deck.gl).\n\n[gee]: https://earthengine.google.com/\n\nTo use this layer, you need to sign in with an EarthEngine-enabled Google\nAccount. [Visit here][gee-signup] to sign up.\n\n[gee-signup]: https://signup.earthengine.google.com/#!/\n\nThis particular example uses the deck.gl React bindings but the\n`EarthEngineLayer` can of course also be used with the pure JavaScript and\nscripting APIs:\n\n```js\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\nimport ee from '@google/earthengine';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {eeObject: null};\n  }\n\n  async _onLoginSuccess(user, loginProvider) {\n    const token = 'Google OAuth2 access token'\n    await EarthEngineLayer.initializeEEApi({clientId: EE_CLIENT_ID, token});\n    this.setState({eeObject: ee.Image('CGIAR/SRTM90_V4')});\n  }\n\n  render() {\n    const {viewport} = this.props;\n    const {eeObject} = this.state;\n    const visParams = {\n      min: 0,\n      max: 4000,\n      palette: ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n    };\n    const layers = [new EarthEngineLayer({eeObject, visParams})];\n    return (\n        <DeckGL controller {...viewport} layers={layers}/>\n    );\n  }\n}\n```\n\n\n## Installation\n\nTo install the dependencies from NPM:\n\n```bash\nnpm install deck.gl @google/earthengine @unfolded.gl/earthengine-layers\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers @google/earthengine @unfolded.gl/earthengine-layers\n```\n\n```js\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\nnew EarthEngineLayer({});\n```\n\nTo use pre-bundled scripts:\n\n```html\n<script src=\"https://unpkg.com/deck.gl@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@google/earthengine@^0.1.221/build/ee_api_js.js\"></script>\n<script src=\"https://unpkg.com/@unfolded.gl/earthengine-layers@^0.1.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@google/earthengine@^0.1.221/build/ee_api_js.js\"></script>\n<script src=\"https://unpkg.com/@unfolded.gl/earthengine-layers@^0.1.0/dist.min.js\"></script>\n```\n\n```js\nnew deck.EarthEngineLayer({});\n```\n\n## Static Methods\n\n### async initializeEEApi({clientId?: string, token?: string})\n\nCan be called to initialize the earth engine API. Calls ` ee.data.authenticateViaOauth()`, `ee.initialize()` or `ee.setToken()`, and returns a `Promise` that resolves when authentication and initialization is completed and the EE API is ready to use.\n\nThis method is just a convenience, it can be replaced with direct calls to the EE API.\n\nParameters:\n- `clientId` A valid Google clientId that has been authenticated with the earthengine scope and set up to whitelist the 'origin' URL that the app will be served on.\n- `token` Alternatively, a pre-generated OAuth2 access token.\n\n\n## Properties\n\nInherits all properties from base [`Layer`][base-layer] and from the [`TileLayer`][tile-layer]. If rendering images, inherits all properties from the [`BitmapLayer`][bitmap-layer]. If rendering vector data, inherits all properties from the [`GeoJsonLayer`][geojson-layer].\n\n[base-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/layer\n[tile-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/tile-layer\n[bitmap-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/bitmap-layer\n[geojson-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/geojson-layer\n\n### Authentication Options\n\n##### `token` (String, optional)\n\n- Default: `null`\n\nA valid Google OAuth2 access token. Unnecessary from `pydeck` or if using\n`initializeEEApi` described above.\n\n### Data Options\n\n##### `eeObject` (EarthEngine Object|String)\n\n- Default: `null`\n\nEither an EarthEngine JavaScript API object, or a serialized string representing\nan object (created with, e.g. `ee.Image.serialize()`).\n\nBy default, `getMap` is called on the object, and image tiles are displayed\nrepresenting the object. You can pass `asVector` or `animate` for alternative\nrendering.\n\n##### `visParams` (Object, optional)\n\n- Default: `null`\n\nAn object representing the visualization parameters passed to Earth Engine. See\n[Earth Engine documentation][visparams-docs] for more information on supported\nparameters. Alternatively, you can style objects by using the\n[`.style()`][style-fn] function for `FeatureCollection` or `ImageCollection`\nobjects.\n\n[visparams-docs]: https://developers.google.com/earth-engine/image_visualization\n[style-fn]: https://developers.google.com/earth-engine/api_docs#ee.featurecollection.style\n\nUnused when `asVector` is `true`.\n\n##### `selectors` (Array of String, optional)\n\n- Default: `[]`\n\nNames of additional properties to download when `asVector` is `true`.\n\nBy default, only the geometries of the `FeatureCollection` are downloaded. In\norder to apply data-driven styling using GeoJsonLayer styling properties, you\nneed to specify those property names here.\n\n### Render Options\n\n##### `asVector` (Boolean, optional)\n\n- Default: `false`\n\nIf `true`, render vector data using the deck.gl `GeoJsonLayer`.\n\nRendering as vector is only possible for `ee.FeatureCollection` objects; an\nerror will be produced if `asVector` is set to `true` when another object type\nis passed.\n\nWhen `asVector` is set, the GeoJSON representation of the `FeatureCollection` is\ndownloaded, which can include very precise geometries. As such, beware of large\ndownloads: the Earth Engine backend may return no data if the output would be\nlarger than 100MB.\n\nTo reduce the dataset size, use `filter` expressions on the `FeatureCollection`\nobject before passing it to `EarthEngineLayer`.\n\n##### `animate` (Boolean, optional)\n\n- Default: `false`\n\nIf `true`, render an animated ImageCollection.\n\nRendering an animation is only possible for `ee.ImageCollection` objects; an\nerror will be produced if `animate` is set to `true` when another object type is\npassed.\n\nThe `ImageCollection` should be filtered and sorted in the order desired for the\nanimation. If an `ImageCollection` contains 20 images, the animation will\ncontain those images as individual frames of the animation, in the same order.\nEarth Engine has an upper limit of 100 animation frames.\n\n##### `animationSpeed` (Number, optional)\n\n- Default: `12`\n\nIf `animate` is `true`, `animationSpeed` represents the number of frames per\nsecond. Keeping this constant implies that animations will play at the same\nspeed; an `ImageCollection` with more frames will have a longer loop than one\nwith fewer frames.\n\n\n## Source\n\n[modules/earthengine-layers/src/earth-engine-layer](https://github.com/UnfoldedInc/earthengine-layers/tree/master/modules/earthengine-layers/src)\n","slug":"modules/earthengine-layers/docs/api-reference/earthengine-layer","title":"EarthEngineLayer"},{"excerpt":"@unfolded.gl/earthengine-layers (Experimental) This module contains a deck.gl layer for Earth Engine API objects. unfolded.gl is a…","rawMarkdownBody":"# @unfolded.gl/earthengine-layers (Experimental)\n\nThis module contains a [deck.gl](https://deck.gl) layer for [Earth Engine API objects](https://github.com/google/earthengine-api).\n\n[unfolded.gl](https://unfolded.gl/docs) is a collection of unfolded for big data visualizations.\n\nFor documentation please visit the [website](https://unfolded.gl).\n","slug":"modules/earthengine-layers","title":"@unfolded.gl/earthengine-layers (Experimental)"},{"excerpt":"Add any custom React components here.","rawMarkdownBody":"Add any custom React components here.","slug":"website/src/components","title":"d any custom React components here."}]}}}