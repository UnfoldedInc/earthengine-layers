{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"What's New v1.0.0 - (2020-06-08) First major version release to NPM, PyPI, and Conda-forge. The  in JavaScript and Python allows for…","rawMarkdownBody":"# What's New\n\n## v1.0.0 - (2020-06-08)\n\nFirst major version release to NPM, PyPI, and Conda-forge.\n\nThe `EarthEngineLayer` in JavaScript and Python allows for rendering Earth\nEngine API objects in deck.gl. The `animate` and `asVector` props allow for rich\nrendering of `ee.ImageCollection` objects as animations and of\n`ee.FeatureCollection` objects with rich client-side data-driven vector styling.\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"pydeck Integration The  can be imported into  as a\ncustom layer module using the  package, making it\npossible to visualize planetary-scale…","rawMarkdownBody":"# pydeck Integration\n\nThe `EarthEngineLayer` can be imported into [`pydeck`](https://pydeck.gl) as a\ncustom layer module using the `pydeck-earthengine-layers` package, making it\npossible to visualize planetary-scale geospatial datasets from Python.\n\nTo use this layer, you'll need to authenticate with an EarthEngine-enabled\nGoogle Account. [Visit here][gee-signup] to sign up.\n\n[gee-signup]: https://signup.earthengine.google.com/#!/\n\n## Examples\n\nThere are no interactive pydeck examples hosted on this website because the\npydeck `EarthEngineLayer` authentication process requires the user to sign in\nwith their own credentials in a Python session.\n\nStatic Jupyter Notebook examples are available [on nbviewer][nbviewer-examples].\nEach notebook corresponds to a JavaScript example viewable on the\n[`earthengine-layers` website][ee-layers-js-examples]\n\n[nbviewer-examples]: https://nbviewer.jupyter.org/github/UnfoldedInc/earthengine-layers/tree/master/py/examples/\n[ee-layers-js-examples]: https://earthengine-layers.com/examples\n\n## Usage\n\n```py\nfrom pydeck_earthengine_layers import EarthEngineLayer\nimport pydeck as pdk\nimport ee\n\n# Initialize Earth Engine library\nee.Initialize()\n\n# Create an Earth Engine object\nimage = ee.Image('CGIAR/SRTM90_V4')\n\n# Define Earth Engine visualization parameters\nvis_params = {\n    \"min\": 0, \n    \"max\": 4000,\n    'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n}\n\n# Create a pydeck EarthEngineLayer object, using the Earth Engine object and\n# desired visualization parameters\nee_layer = EarthEngineLayer(image, vis_params)\n\n# Define the initial viewport for the map\nview_state = pdk.ViewState(latitude=37.7749295, longitude=-122.4194155, zoom=10, bearing=0, pitch=45)\n\n# Create a Deck instance, and display in Jupyter\nr = pdk.Deck(layers=[ee_layer], initial_view_state=view_state)\nr.show()\n```\n\n## Installation\n\nTo install the dependencies from the Python Package Index (PyPI):\n\n```bash\npip install earthengine-api pydeck pydeck-earthengine-layers\n```\n\n`pydeck-earthengine-layers` is not on Conda. If you use Conda for package\nmanagement, you may install `earthengine-api` and `pydeck` from `conda-forge`,\nthen `pydeck-earthengine-layers` using `pip`:\n\n```\nconda install -c conda-forge earthengine-api pydeck\npip install pydeck-earthengine-layers\n```\n\n### Enable with Jupyter\n\nAfter installing `pydeck`, you **must also enable it for use with Jupyter**. See\nthe [pydeck documentation][pydeck-enable-jupyter] for instructions.\n\n[pydeck-enable-jupyter]: https://pydeck.gl/installation.html#enabling-pydeck-for-jupyter\n","slug":"docs/developer-guide/pydeck-integration","title":"pydeck Integration"},{"excerpt":"Authentication Authenticating with Earth Engine services is likely to be the biggest\ncomplication for developers who are not already working…","rawMarkdownBody":"# Authentication\n\nAuthenticating with Earth Engine services is likely to be the biggest\ncomplication for developers who are not already working with the EE API.\n\nWhile the Earth Engine API documentation and forums are the official source of\ninformation on how to authenticate, this is a quick overview.\n\n## Pydeck\n\nIf using the `pydeck-earthengine-layers` package, any extra authentication steps\nshould be handled for you automatically. You'll need only the standard\nauthentication required by the `earthengine-api` library to work with Earth\nEngine Python objects, i.e.:\n\n```py\nimport ee\n\n# Necessary only on the first install; opens a Google sign-in prompt\nee.Authenticate()\n\n# Necessary in every Python session\nee.Initialize()\n```\n\n## JavaScript\n\nThe `EarthEngineLayer` provides an `initializeEEApi` helper to authenticate and\ninitialize the JavaScript Earth Engine library. This calls\n`ee.data.authenticateViaOauth()` or `ee.setToken()`, and then `ee.initialize()`,\nand returns a `Promise` that resolves when authentication and initialization is\ncompleted and the EE API is ready to use.\n\n### Authenticating via Login (OAuth2)\n\nThe easiest way to authenticate from a JavaScript application is to use\n`initializeEEApi` with a `clientId`.\n\nNote that this requires:\n\n- registering a Google client id\n- requesting Earth Engine access for that client\n- adding the URLs from which the application will be served to the whitelisted origins for that client id.\n- Visitors to your website must have a Google Account that is approved for use with Earth Engine.\n\n## Authenticating via Access Token\n\nIf you have an existing OAuth2 authentication workflow, you can use that to\ngenerate access tokens, which you then pass to\n\n```js\ninitializeEEApi({token})\n```\n\nAn access token is valid for a short period of time, usually one hour, and any\nrequests to the EarthEngine backend will fail after that time until a new access\ntoken is provided.\n","slug":"docs/developer-guide/authentication","title":"Authentication"},{"excerpt":"Get Started Installing Using in Python The  can be used as a plugin layer to\n. For more information see pydeck\nintegration. Using in…","rawMarkdownBody":"# Get Started\n\n## Installing\n\n```sh\n$ yarn add @google/earthengine\n$ yarn add @unfolded/earthengine-layers\n$ yarn add deck.gl\n```\n\n## Using in Python\n\nThe `EarthEngineLayer` can be used as a plugin layer to\n[`pydeck`](https://pydeck.gl). For more information see [pydeck\nintegration](/docs/developer-guide/pydeck-integration.md).\n\n## Using in JavaScript\n\nTo use the `EarthEngineLayer` in your JavaScript application to visualize Earth\nEngine API objects (such as `ee.Image` objects):\n\n```js\nimport {Deck} from '@deck.gl/core`;\nimport {EarthEngineLayer} from `@unfolded/earthengine-layers`;\nimport ee from `@google/earthengine`;\n\nconst eeObject = ee.Image('CGIAR/SRTM90_V4');\nconst visParams = {\n  min: 0,\n  max: 4000,\n  palette: ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n};\n\nnew Deck({\n  ...,\n  layers: new EarthEngineLayer({eeObject, visParams})\n});\n```\n\n## Cloning the Repo\n\n```sh\ngit clone https://github.com/UnfoldedInc/earthengine-layers\ncd earthengine-layers\n```\n\n## Running Examples\n\nYou will need a Google client id which has been approved for use with Earth\nEngine. You also need to make sure you log in with a Google user account which\nhas been approved for use with earth engine.\n\n```sh\ncd examples/image\nEE_CLIENT_ID=<your-client-id-goes-here>.apps.googleusercontent.com yarn start\n```\n\n## Contributing\n\n### Building and Testing Code\n\n```sh\ngit clone https://github.com/UnfoldedInc/earthengine-layers\ncd earthengine-layers\nyarn bootstrap\n```\n\n```sh\nyarn lint\nyarn lint fix # Autoformats code\nyarn test\n```\n\n## Building the Website\n\nTo build the website locally (for instance if you are making contributions)\n\n```sh\ncd website\nyarn\nyarn develop\n```\n\nTo build the website for production\n\n```sh\ncd website\nexport EE_CLIENT_ID=...\nexport MapboxAccessToken=...\nyarn build\nyarn deploy\n```\n","slug":"docs/developer-guide/get-started","title":"Get Started"},{"excerpt":"earthengine-layers deck.gl layers for Google Earth Engine for JavaScript and\nPython. The primary export is the  layer, which accepts Google…","rawMarkdownBody":"# earthengine-layers\n\n[deck.gl](https://deck.gl) layers for Google Earth Engine for JavaScript and\nPython.\n\nThe primary export is the `EarthEngineLayer` layer, which accepts [Google Earth\nEngine API](https://github.com/google/earthengine-api) objects (`ee.Image`,\n`ee.ImageCollection`, `ee.FeatureCollection`) through its `eeObject` prop, and\nrenders the desired datasets via a customized deck.gl `TileLayer`.\n\n## License\n\nMIT License\n","slug":"docs","title":"earthengine-layers"},{"excerpt":"@unfolded.gl/earthengine-layers This module contains a deck.gl layer for Google Earth Engine API objects. The primary export is the  layer…","rawMarkdownBody":"# @unfolded.gl/earthengine-layers\n\nThis module contains a [deck.gl](https://deck.gl) layer for [Google Earth Engine API objects](https://github.com/google/earthengine-api).\n\nThe primary export is the `EarthEngineLayer` layer, which accepts Google Earth Engine API objects (`ee.Image`, `ee.ImageCollection`, `ee.FeatureCollection`) through its `eeObject` prop, and renders the desired datasets via a customized deck.gl `TileLayer`.\n\nFor documentation please visit the [website](https://earthengine-layers.com).\n","slug":"modules/earthengine-layers","title":"@unfolded.gl/earthengine-layers"},{"excerpt":"EarthEngineLayer The  connects Google Earth Engine to\ndeck.gl, making it possible to visualize planetary-scale\ngeospatial datasets in a…","rawMarkdownBody":"# EarthEngineLayer\n\n<!-- INJECT:\"TileLayerDemo\" -->\n\n<p class=\"badges\">\n  <img src=\"https://img.shields.io/badge/@unfolded.gl/earthengine--layers-lightgrey.svg?style=flat-square\" alt=\"@unfolded.gl/earthengine-layers\" />\n</p>\n\nThe `EarthEngineLayer` connects [Google Earth Engine][gee] to\n[deck.gl](https://deck.gl), making it possible to visualize planetary-scale\ngeospatial datasets in a JavaScript application.\n\n[gee]: https://earthengine.google.com/\n\nTo use this layer, you need to sign in with an EarthEngine-enabled Google\nAccount. [Visit here][gee-signup] to sign up.\n\n[gee-signup]: https://signup.earthengine.google.com/#!/\n\nThis particular example uses the deck.gl React bindings but the\n`EarthEngineLayer` can of course also be used with the pure JavaScript and\nscripting APIs:\n\n```js\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\nimport ee from '@google/earthengine';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {eeObject: null};\n  }\n\n  async _onLoginSuccess(user, loginProvider) {\n    const token = 'Google OAuth2 access token'\n    await EarthEngineLayer.initializeEEApi({clientId: EE_CLIENT_ID, token});\n    this.setState({eeObject: ee.Image('CGIAR/SRTM90_V4')});\n  }\n\n  render() {\n    const {viewport} = this.props;\n    const {eeObject} = this.state;\n    const visParams = {\n      min: 0,\n      max: 4000,\n      palette: ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n    };\n    const layers = [new EarthEngineLayer({eeObject, visParams})];\n    return (\n        <DeckGL controller {...viewport} layers={layers}/>\n    );\n  }\n}\n```\n\n\n## Installation\n\nTo install the dependencies from NPM:\n\n```bash\nnpm install deck.gl @google/earthengine @unfolded.gl/earthengine-layers\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers @google/earthengine @unfolded.gl/earthengine-layers\n```\n\n```js\nimport {EarthEngineLayer} from '@unfolded.gl/earthengine-layers';\nnew EarthEngineLayer({});\n```\n\nTo use pre-bundled scripts:\n\n```html\n<script src=\"https://unpkg.com/deck.gl@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@google/earthengine@^0.1.221/build/ee_api_js.js\"></script>\n<script src=\"https://unpkg.com/@unfolded.gl/earthengine-layers@^0.1.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^8.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@google/earthengine@^0.1.221/build/ee_api_js.js\"></script>\n<script src=\"https://unpkg.com/@unfolded.gl/earthengine-layers@^0.1.0/dist.min.js\"></script>\n```\n\n```js\nnew deck.EarthEngineLayer({});\n```\n\n## Static Methods\n\n### async initializeEEApi({clientId?: string, token?: string})\n\nCan be called to initialize the earth engine API. Calls\n`ee.data.authenticateViaOauth()`, `ee.initialize()` or `ee.setToken()`, and\nreturns a `Promise` that resolves when authentication and initialization is\ncompleted and the EE API is ready to use.\n\nThis method is just a convenience, it can be replaced with direct calls to the\nEE API.\n\nParameters:\n- `clientId` A valid Google clientId that has been authenticated with the earthengine scope and set up to whitelist the 'origin' URL that the app will be served on.\n- `token` Alternatively, a pre-generated OAuth2 access token.\n\n\n## Properties\n\nInherits all properties from base [`Layer`][base-layer] and from the [`TileLayer`][tile-layer]. If rendering images, inherits all properties from the [`BitmapLayer`][bitmap-layer]. If rendering vector data, inherits all properties from the [`GeoJsonLayer`][geojson-layer].\n\n[base-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/layer\n[tile-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/tile-layer\n[bitmap-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/bitmap-layer\n[geojson-layer]: https://deck.gl/#/documentation/deckgl-api-reference/layers/geojson-layer\n\n### Authentication Options\n\n##### `token` (String, optional)\n\n- Default: `null`\n\nA valid Google OAuth2 access token. Unnecessary from `pydeck` or if using\n`initializeEEApi` described above.\n\n### Data Options\n\n##### `eeObject` (EarthEngine Object|String)\n\n- Default: `null`\n\nEither an EarthEngine JavaScript API object, or a serialized string representing\nan object (created with, e.g. `ee.Image.serialize()`).\n\nBy default, `getMap` is called on the object, and image tiles are displayed\nrepresenting the object. You can pass `asVector` or `animate` for alternative\nrendering.\n\n##### `visParams` (Object, optional)\n\n- Default: `null`\n\nAn object representing the visualization parameters passed to Earth Engine. See\n[Earth Engine documentation][visparams-docs] for more information on supported\nparameters. Alternatively, you can style objects by using the\n[`.style()`][style-fn] function for `FeatureCollection` or `ImageCollection`\nobjects.\n\n[visparams-docs]: https://developers.google.com/earth-engine/image_visualization\n[style-fn]: https://developers.google.com/earth-engine/api_docs#ee.featurecollection.style\n\nUnused when `asVector` is `true`.\n\n##### `selectors` (Array of String, optional)\n\n- Default: `[]`\n\nNames of additional properties to download when `asVector` is `true`.\n\nBy default, only the geometries of the `FeatureCollection` are downloaded. In\norder to apply data-driven styling using GeoJsonLayer styling properties, you\nneed to specify those property names here.\n\n### Render Options\n\n##### `asVector` (Boolean, optional)\n\n- Default: `false`\n\nIf `true`, render vector data using the deck.gl `GeoJsonLayer`.\n\nRendering as vector is only possible for `ee.FeatureCollection` objects; an\nerror will be produced if `asVector` is set to `true` when another object type\nis passed.\n\nWhen `asVector` is set, the GeoJSON representation of the `FeatureCollection` is\ndownloaded, which can include very precise geometries. As such, beware of large\ndownloads: the Earth Engine backend may return no data if the output would be\nlarger than 100MB.\n\nTo reduce the dataset size, use `filter` expressions on the `FeatureCollection`\nobject before passing it to `EarthEngineLayer`.\n\n##### `animate` (Boolean, optional)\n\n- Default: `false`\n\nIf `true`, render an animated ImageCollection.\n\nRendering an animation is only possible for `ee.ImageCollection` objects; an\nerror will be produced if `animate` is set to `true` when another object type is\npassed.\n\nThe `ImageCollection` should be filtered and sorted in the order desired for the\nanimation. If an `ImageCollection` contains 20 images, the animation will\ncontain those images as individual frames of the animation, in the same order.\nEarth Engine has an upper limit of 100 animation frames.\n\n##### `animationSpeed` (Number, optional)\n\n- Default: `12`\n\nIf `animate` is `true`, `animationSpeed` represents the number of frames per\nsecond. Keeping this constant implies that animations will play at the same\nspeed; an `ImageCollection` with more frames will have a longer loop than one\nwith fewer frames.\n\n\n## Source\n\n[modules/earthengine-layers/src/earth-engine-layer](https://github.com/UnfoldedInc/earthengine-layers/tree/master/modules/earthengine-layers/src)\n","slug":"modules/earthengine-layers/docs/api-reference/earthengine-layer","title":"EarthEngineLayer"},{"excerpt":"pydeck-earthengine-layers Pydeck wrapper for use with Google Earth Engine Install This also ensures pydeck is installed. If you haven't…","rawMarkdownBody":"# pydeck-earthengine-layers\n\nPydeck wrapper for use with Google Earth Engine\n\n## Install\n\n```bash\npip install pydeck-earthengine-layers\n```\n\nThis also ensures [pydeck](https://pydeck.gl/) is installed. If you haven't\npreviously enabled pydeck to be used with Jupyter, follow [its\ninstructions](https://pydeck.gl/installation.html) to install.\n\n## Using\n\nFor an example, see the\n[`examples/Introduction.ipynb`](https://raw.githubusercontent.com/UnfoldedInc/earthengine-layers/master/py/examples/Introduction.ipynb) Jupyter Notebook.\n\n## Release notes\n\nTo release, bump the version by running:\n\n```bash\nbumpversion patch\n// or\nbumpversion minor\n```\n\nThen create a dist bundle with:\n\n```bash\npython setup.py sdist\n```\n\nThen upload to PyPI with\n\n```bash\ntwine upload dist/pydeck-earthengine-layers-0.1.0.tar.gz\n```\n\nreplacing with the current version number.\n","slug":"py","title":"pydeck-earthengine-layers"},{"excerpt":"Earth Engine Pydeck examples This folder contains examples for using Pydeck with Google Earth Engine. Install To run the example notebooks…","rawMarkdownBody":"## Earth Engine Pydeck examples\n\nThis folder contains examples for using Pydeck with Google Earth Engine.\n\n### Install\n\nTo run the example notebooks locally, you need to install a few Python\ndependencies. A custom Conda environment is recommended. To create and enter the\nenvironment, and enable Pydeck with Jupyter Notebook run:\n\n```bash\nconda create -n pydeck-ee -c conda-forge python jupyter jupyterlab notebook pydeck earthengine-api nodejs -y\nconda activate pydeck-ee\n\n# Install the pydeck-earthengine-layers package from pip\npip install pydeck-earthengine-layers\n\n# If using Jupyter Notebook:\njupyter nbextension install --sys-prefix --symlink --overwrite --py pydeck\njupyter nbextension enable --sys-prefix --py pydeck\n\n# If using Jupyter Lab\njupyter labextension install @jupyter-widgets/jupyterlab-manager\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n\n### Start a notebook\n\nThen to start a notebook with Jupyter Notebook, run:\n\n```bash\njupyter notebook Introduction.ipynb\n```\n\nTo start a notebook with Jupyter Lab, run:\n\n```bash\njupyter lab Introduction.ipynb\n```","slug":"py/examples","title":" Earth Engine Pydeck examples"},{"excerpt":"Changelog 1.0.0 (2020-06-05) Release in conjunction with NPM 1.0 release. 0.2.2 (2020-06-05) Update Python module to point to beta NPM…","rawMarkdownBody":"# Changelog\n\n## 1.0.0 (2020-06-05)\n\n- Release in conjunction with NPM 1.0 release.\n\n## 0.2.2 (2020-06-05)\n\n- Update Python module to point to _beta_ NPM module via unpkg for now\n\n## 0.2.1 (2020-06-04)\n\n- Update Python module to point to released NPM module via unpkg, instead of serving directly from Github. #77\n\n## 0.2.0 (2020-05-26)\n\n- Set `vis_params` as the second positional argument #56\n- Use a minified bundle #51\n- Option to set a custom EE Layer bundle url #31\n\n## 0.1.1 (2020-04-27)\n\n- Include `requirements.txt` and `requirements_dev.txt` in `MANIFEST.in` to fix install.\n\n## 0.1.0 (2020-04-23)\n\n- First release on PyPI.\n","slug":"py/CHANGELOG","title":"Changelog"},{"excerpt":"Pydeck EarthEngineLayer The pydeck  connects Google Earth Engine to\npydeck, making it possible to visualize planetary-scale\ngeospatial…","rawMarkdownBody":"# Pydeck EarthEngineLayer\n\n<p class=\"badges\">\n  <img src=\"https://img.shields.io/badge/@unfolded.gl/earthengine--layers-lightgrey.svg?style=flat-square\" alt=\"@unfolded.gl/earthengine-layers\" />\n</p>\n\nThe pydeck `EarthEngineLayer` connects [Google Earth Engine][gee] to\n[pydeck](https://pydeck.gl), making it possible to visualize planetary-scale\ngeospatial datasets from Python.\n\n[gee]: https://earthengine.google.com/\n\nTo use this layer, you'll need to authenticate with an EarthEngine-enabled\nGoogle Account. [Visit here][gee-signup] to sign up.\n\n[gee-signup]: https://signup.earthengine.google.com/#!/\n\n```py\nfrom pydeck_earthengine_layers import EarthEngineLayer\nimport pydeck as pdk\nimport ee\n\n# Initialize Earth Engine library\nee.Initialize()\n\n# Create an Earth Engine object\nimage = ee.Image('CGIAR/SRTM90_V4')\n\n# Define Earth Engine visualization parameters\nvis_params = {\n    \"min\": 0, \n    \"max\": 4000,\n    'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n}\n\n# Create a pydeck EarthEngineLayer object, using the Earth Engine object and\n# desired visualization parameters\nee_layer = EarthEngineLayer(image, vis_params)\n\n# Define the initial viewport for the map\nview_state = pdk.ViewState(latitude=37.7749295, longitude=-122.4194155, zoom=10, bearing=0, pitch=45)\n\n# Create a Deck instance, and display in Jupyter\nr = pdk.Deck(layers=[ee_layer], initial_view_state=view_state)\nr.show()\n```\n\n## Installation\n\nTo install the dependencies from the Python Package Index (PyPI):\n\n```bash\npip install earthengine-api pydeck pydeck-earthengine-layers\n```\n\n`pydeck-earthengine-layers` is not on Conda. If you use Conda for package\nmanagement, you may install `earthengine-api` and `pydeck` from `conda-forge`,\nthen `pydeck-earthengine-layers` using `pip`:\n\n```\nconda install -c conda-forge earthengine-api pydeck\npip install pydeck-earthengine-layers\n```\n\n### Enable with Jupyter\n\nAfter installing `pydeck`, you **must also enable it for use with Jupyter**. See\nthe [pydeck documentation][pydeck-enable-jupyter] for instructions.\n\n[pydeck-enable-jupyter]: https://pydeck.gl/installation.html#enabling-pydeck-for-jupyter\n\n## `EarthEngineLayer`\n\nThe `pydeck-earthengine-layer` package exports a single object: the\n`EarthEngineLayer` class. This layer makes working with EarthEngine easy: behind\nthe scenes it handles authentication, loading the EarthEngine JavaScript\nlibrary, and correctly passing the EarthEngine objects to JavaScript.\n\n### Arguments\n\n- `ee_object`: (_required_), an instance of a Python EarthEngine object, such as\n  an `ee.Image`, `ee.ImageCollection`, `ee.FeatureCollection`, etc.\n- `vis_params`: (`dict`, _optional_), parameters for how to visualize the\n  EarthEngine object. See [EarthEngine\n  documentation](https://developers.google.com/earth-engine/image_visualization)\n  for expected `dict` layout. Default: `None`.\n- `credentials`: (_optional_), Google OAuth2 credentials object. Default: saved\n  credentials are loaded automatically.\n- `library_url`: (`str`, _optional_), Force loading of the JavaScript\n  `EarthEngineLayer` bundle for a specific URL. By default, loads from the most\n  recent `EarthEngineLayer` release.\n\nAll properties accepted by the [JavaScript\n`EarthEngineLayer`](/modules/earthengine-layers/docs/api-reference/earthengine-layer.md#properties)\nare accepted as keyword arguments. So, for example, to animate an\n`ee.ImageCollection` from Python, you can pass \n\n```py\nEarthEngineLayer(ee.ImageCollection(...), animate=True)\n```\n\n## Source\n\n[`py/pydeck_earthengine_layers/`](https://github.com/UnfoldedInc/earthengine-layers/tree/master/py/pydeck_earthengine_layers)\n","slug":"py/docs/pydeck-earthengine-layer","title":"Pydeck EarthEngineLayer"},{"excerpt":"Add any custom React components here.","rawMarkdownBody":"Add any custom React components here.","slug":"website/src/components","title":"d any custom React components here."}]}}}